name: Java CI with Gradle

on:
 workflow_dispatch:  # 수동 실행 가능하게 설정

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Run unit tests
      run: ./gradlew test

    - name: Build with Gradle Wrapper
      run: ./gradlew build

  version-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'  # master 브랜치에서만 실행되도록 설정

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Generate version tag
      run: |
        # Generate a version tag based on the current commit
        VERSION=$(date +'%Y%m%d%H%M%S')  # 예시로 현재 날짜와 시간으로 버전 태그 생성
        git tag "v${VERSION}"
        git push origin "v${VERSION}"

  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    if: github.ref == 'refs/heads/master'  # master 브랜치에서만 실행되도록 설정

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Deploy to production (example)
      run: |
        echo "Deploying to production environment"
        # 배포 작업을 여기에 추가
#
#  ec2-deploy:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#    if: github.ref == 'refs/heads/master'  # master 브랜치에서만 실행되도록 설정
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up SSH
#      uses: webfactory/ssh-agent@v0.5.3
#      with:
#        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}  # GitHub secrets에 EC2 SSH 비공개 키를 추가하세요.
#
#    - name: Deploy to EC2 instance via SSH
#      run: |
#        ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY }} ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
#          # EC2 인스턴스에서 배포 작업을 여기에 추가
#          
#          # 예시: 도커를 사용한 배포
#          docker pull my-docker-image:latest
#          docker-compose -f /home/ubuntu/docker-compose.yml up --build -d
#
#          # 배포 후 로그 확인
#          docker ps
#        EOF
